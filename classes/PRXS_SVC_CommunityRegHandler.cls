//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class PRXS_SVC_CommunityRegHandler implements Auth.RegistrationHandler{
    global boolean canCreateUser(Auth.UserData data) {
        //TODO: Check whether we want to allow creation of a user with this data
        //Set<String> s = new Set<String>{'usernamea', 'usernameb', 'usernamec'};
        //if(s.contains(data.username)) {
        //return true;
        //}
        return true;
    }
    public class customException extends Exception {}
    global User createUser(Id portalId, Auth.UserData data){
        if(!canCreateUser(data)) {
            //Returning null or throwing an exception fails the SSO flow
            return null;
        }
        if(data.attributeMap.containsKey('sfdc_networkid')) {
            //We have a community id, so create a user with community access
            Contact c;
            try{
                c = [SELECT Id FROM Contact WHERE Email=:data.email AND Allow_Community_Self_Registration__c=true LIMIT 1];
            }catch(Exception e){
                throw new customException('Unfortunately, you are not authorized to self-register to this Community. Please contact us for more details.');
            }
            List<user> existingUser = [select id from user where contactId =: c.id];
            if (existingUser != null && existingUser.size()>0) {
                return existingUser[0];
            } Else {
                System.debug('c: '+c);
                //TODO: Customize the username and profile. Also check that the username doesn't already exist and
                //possibly ensure there are enough org licenses to create a user. Must be 80 characters or less.
                User u = new User();
                Profile p = [SELECT Id FROM profile WHERE name='Praxis Community User'];
                System.debug('p: '+p);
                u.username = data.username;
                u.email = data.email;
                u.lastName = data.lastName;
                u.firstName = data.firstName;
                String alias = data.username;
                //Alias must be 8 characters or less
                if(alias.length() > 8) {
                    alias = alias.substring(0, 8);
                }
                u.alias = alias;
                u.languagelocalekey = 'en_US';//UserInfo.getLocale();
                u.localesidkey = UserInfo.getLocale();
                u.emailEncodingKey = 'UTF-8';
                u.timeZoneSidKey = 'America/New_York';
                u.profileId = p.Id;
                u.contactId = c.Id;
                System.debug('u: '+u);
                return u;
            }
        }else{
            return null;
        }
    }
    
    global void updateUser(Id userId, Id portalId, Auth.UserData data){
        User u = new User(id=userId);
        //TODO: Customize the username. Must be 80 characters or less.
        u.username = data.username;
        u.email = data.email;
        u.lastName = data.lastName;
        u.firstName = data.firstName;
        String alias = data.username;
        //Alias must be 8 characters or less
        if(alias.length() > 8) {
            alias = alias.substring(0, 8);
        }
        u.alias = alias;
        update(u);
    }
}